//
//  VideoCallPresenter.swift
//  Sami
//
//  Created Kencor Health on 30/01/19.
//  Copyright © 2019 Kencor Health. All rights reserved .
//
//  Template generated by Juanpe Catalán @JuanpeCMiOS
//

import UIKit

class VideoIncomingCallPresenter: VideoIncomingCallPresenterProtocol, VideoIncomingCallInteractorOutputProtocol {
    
    
    private enum MessengerStatus {
        case connecting
        case connected
        case disconnected
    }
    
    weak private var view       : VideoIncomingCallViewProtocol?
    var interactor              : VideoIncomingCallInteractorInputProtocol?
    private let router          : VideoIncomingCallWireframeProtocol
    private var currentMessage  : String = ""
    private var status          : MessengerStatus = .disconnected {
        didSet {
            //            self.view?.updateTitle(withText: title)
            //            self.view?.sendIsEnabled(status == .connected && currentMessage != "")
        }
    }
    
    
    private var title           : String {
        get {
            if status == .connecting || status == .disconnected {
                return "connecting..."
            } else {
//                if SessionData.shared.clinicDetail != nil {
//                    return SessionData.shared.clinicDetail.name ?? "Clinic Chat".loc()
//                } else {
                    return "Clinic Chat"
//                }
            }
        }
    }
    
    init(interface: VideoIncomingCallViewProtocol, interactor: VideoIncomingCallInteractorInputProtocol?, router: VideoIncomingCallWireframeProtocol) {
        self.view = interface
        self.interactor = interactor
        self.router = router
        //        self.messages = Dictionary<TimeInterval,Array<Message>>()
    }
    
    deinit {
        print("Deinit \(self)")
    }
    
    func screenWillDisappear() {
        
    }
    func callAccepted() {
        self.interactor?.callAccepted()
    }
    func callRejected() {
        self.interactor?.callRejected()
    }
    
    func getMessageObject() -> VideoCallMessage? {
        let obj = interactor?.getMessageObject()
        return obj
    }
}
